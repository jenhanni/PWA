[July 9th, 2024 Tuesday]
Progressive Web Apps

배경
- 2015년 구글 크롬 엔지니어인 알렉스 러셀이 고안한 개념
 - 웹 vs 앱 이라는 진부한 싸움은 이제 그만! 웹에서 출발해 앱으로 가는 여정에서 출발지와 도착지는 명확

특징
 - 웹의 장점은 그대로 유지하면서 네이티브 앱의 강점으로 무장
 - 네이티브 앱의 강력한 기능성과 웹의 뛰어난 접근성을 모두 갖춘 가장 이상적인 형태의 웹앱이라는 평가



웹앱
 - 개발시간 단축, 웹 브라우저만 있으면 어디든 배포가능, 모바일에 있는 기능을 다 사용 불가, 마켓 배포 불가(앱스토어)

네이티브 앱
 - 호환성이 웹앱에 비해 떨어짐(자바, c언어 따로따로 개발해야함), 마켓에 배포 가능, 모든 기능 다 사용
(기본상식: 안드로이드(aOS)는 자바로 개발, iOS는 C언어로 개발)

하이브리드 앱 (웹앱+네이티브 앱)
 - 마켓에 배포 가능, 같은 코드를 모바일 운영체제 별로 다르게 패키징 가능
 - 네이티브 앱과 같은 성능을 내는 데는 한계가 있음(가장 큰 단점)
 - 하드웨어 기능을 사용할 수 있으나 연결해주는 플러그인에 의존해야 하므로 제약이 있을 수 있음

모바일앱이 웹앱이 되게 하는데 중요한게 PWA(프로그레시브 웹앱)

PWA = 네이티브 앱 + 모바일 웹앱 + 하이브리드 앱
 - 푸시알림, 오프라인 캐시, https 사용 가능
 - 마켓 배포 불가 but 방법 있음
 - 안드로이드, 윈도우 os는 pwa의 모든 기능을 사용할 수 있으나 현재 iOS의 경우는 일부만 사용할 수 있음

본질은 웹이지만 앱처럼 쓸 수 있어야 한다 -> 네이티브 앱과 똑같은 사용자 경험을 제공하는 것이 궁극적인 목표
-> 앱을 향해 조금씩 앞으로 나아가야(progressive) 한다는 철학


PWA 필수 요소와 주요 기능
 PWA 필수 요소
   1. 서비스 워커
   2. 웹앱 매니페스트
   3. https (닷홈에 못올림)

 주요 기능(네이티브 앱과 같은 경험)
   4. 푸시 알림
   5. 홈 화면에 추가 (A2HS, Add To Home Screen)
   6. 웹 API

 1. 서비스 워커
   - 웹 브라우저 내에 있음
   - 웹 페이지와 분리
   - 항상 실행되고 있는 백그라운드 프로그램
   - 캐시 관리

 2. 웹앱 매니페스트
   - 앱 소개 정보
   - 앱 기본 설정
   - JSON 파일 형식
   - A2HS(Add to Home Screen)

 3. 보안을 강화한 https & local host(vs code 미리보기 같은)
   - 암호화와 인증을 거쳐 보안을 강화한 웹 통신 규약
   - 반응속도가 http보다 빠름
   - pwa는 로컬에서도 동작 가능

JSON파일을 스크립트로 쓰려면 파싱해야하고
스크립트를 JSON에서 쓰려면 stringify해야함
JSON은 문자열 데이터


1. 기본 정보 작성
   name: 첫 화면(스플래시 스크린)에 출력될 이름, 옴니(다운로드) 버튼에도 출력, 홈화면 아이콘
   short_name: 주로 모바일에서 사용, 설치 배너에 출력
   description: 웹 크롤러가 정보 가져갈때 사용
2. 시작 URL 설정
   스코프(scope)
     - 매니페스트에 정의도니 내용이 적용될 수 있는 파일들의 경로 범위를 지정
     - 웹앱이 어느 폴더에 있는지 지정
     - ".": 현재 폴더에 있는 모든 파일
   start_url (사진!!!)


이런식의 문법 엄청 많이 씀!
fetch().then().then()